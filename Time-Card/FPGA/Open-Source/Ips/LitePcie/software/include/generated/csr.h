//--------------------------------------------------------------------------------
// Auto-generated by LiteX (--------) on 2023-10-04 11:16:29
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* pcie_phy */
#define CSR_PCIE_PHY_BASE (CSR_BASE + 0x1000L)
#define CSR_PCIE_PHY_PHY_LINK_STATUS_ADDR (CSR_BASE + 0x1000L)
#define CSR_PCIE_PHY_PHY_LINK_STATUS_SIZE 1
static inline uint32_t pcie_phy_phy_link_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
#define CSR_PCIE_PHY_PHY_LINK_STATUS_STATUS_OFFSET 0
#define CSR_PCIE_PHY_PHY_LINK_STATUS_STATUS_SIZE 1
static inline uint32_t pcie_phy_phy_link_status_status_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_phy_phy_link_status_status_read(void) {
	uint32_t word = pcie_phy_phy_link_status_read();
	return pcie_phy_phy_link_status_status_extract(word);
}
#define CSR_PCIE_PHY_PHY_LINK_STATUS_RATE_OFFSET 1
#define CSR_PCIE_PHY_PHY_LINK_STATUS_RATE_SIZE 1
static inline uint32_t pcie_phy_phy_link_status_rate_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t pcie_phy_phy_link_status_rate_read(void) {
	uint32_t word = pcie_phy_phy_link_status_read();
	return pcie_phy_phy_link_status_rate_extract(word);
}
#define CSR_PCIE_PHY_PHY_LINK_STATUS_WIDTH_OFFSET 2
#define CSR_PCIE_PHY_PHY_LINK_STATUS_WIDTH_SIZE 2
static inline uint32_t pcie_phy_phy_link_status_width_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t pcie_phy_phy_link_status_width_read(void) {
	uint32_t word = pcie_phy_phy_link_status_read();
	return pcie_phy_phy_link_status_width_extract(word);
}
#define CSR_PCIE_PHY_PHY_LINK_STATUS_LTSSM_OFFSET 4
#define CSR_PCIE_PHY_PHY_LINK_STATUS_LTSSM_SIZE 6
static inline uint32_t pcie_phy_phy_link_status_ltssm_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t pcie_phy_phy_link_status_ltssm_read(void) {
	uint32_t word = pcie_phy_phy_link_status_read();
	return pcie_phy_phy_link_status_ltssm_extract(word);
}
#define CSR_PCIE_PHY_PHY_MSI_ENABLE_ADDR (CSR_BASE + 0x1004L)
#define CSR_PCIE_PHY_PHY_MSI_ENABLE_SIZE 1
static inline uint32_t pcie_phy_phy_msi_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
#define CSR_PCIE_PHY_PHY_MSIX_ENABLE_ADDR (CSR_BASE + 0x1008L)
#define CSR_PCIE_PHY_PHY_MSIX_ENABLE_SIZE 1
static inline uint32_t pcie_phy_phy_msix_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
#define CSR_PCIE_PHY_PHY_BUS_MASTER_ENABLE_ADDR (CSR_BASE + 0x100cL)
#define CSR_PCIE_PHY_PHY_BUS_MASTER_ENABLE_SIZE 1
static inline uint32_t pcie_phy_phy_bus_master_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x100cL));
}
#define CSR_PCIE_PHY_PHY_MAX_REQUEST_SIZE_ADDR (CSR_BASE + 0x1010L)
#define CSR_PCIE_PHY_PHY_MAX_REQUEST_SIZE_SIZE 1
static inline uint32_t pcie_phy_phy_max_request_size_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010L));
}
#define CSR_PCIE_PHY_PHY_MAX_PAYLOAD_SIZE_ADDR (CSR_BASE + 0x1014L)
#define CSR_PCIE_PHY_PHY_MAX_PAYLOAD_SIZE_SIZE 1
static inline uint32_t pcie_phy_phy_max_payload_size_read(void) {
	return csr_read_simple((CSR_BASE + 0x1014L));
}

/* pcie_msi */
#define CSR_PCIE_MSI_BASE (CSR_BASE + 0x1800L)
#define CSR_PCIE_MSI_ENABLE_ADDR (CSR_BASE + 0x1800L)
#define CSR_PCIE_MSI_ENABLE_SIZE 2
static inline uint64_t pcie_msi_enable_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x1800L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x1804L));
	return r;
}
static inline void pcie_msi_enable_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x1800L));
	csr_write_simple(v, (CSR_BASE + 0x1804L));
}
#define CSR_PCIE_MSI_PBA_ADDR (CSR_BASE + 0x1808L)
#define CSR_PCIE_MSI_PBA_SIZE 2
static inline uint64_t pcie_msi_pba_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x1808L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x180cL));
	return r;
}

/* pcie_msi_table */
#define CSR_PCIE_MSI_TABLE_BASE (CSR_BASE + 0x2000L)

/* ptm_requester */
#define CSR_PTM_REQUESTER_BASE (CSR_BASE + 0x3000L)
#define CSR_PTM_REQUESTER_CONTROL_ADDR (CSR_BASE + 0x3000L)
#define CSR_PTM_REQUESTER_CONTROL_SIZE 1
static inline uint32_t ptm_requester_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void ptm_requester_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
#define CSR_PTM_REQUESTER_CONTROL_ENABLE_OFFSET 0
#define CSR_PTM_REQUESTER_CONTROL_ENABLE_SIZE 1
static inline uint32_t ptm_requester_control_enable_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ptm_requester_control_enable_read(void) {
	uint32_t word = ptm_requester_control_read();
	return ptm_requester_control_enable_extract(word);
}
static inline uint32_t ptm_requester_control_enable_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ptm_requester_control_enable_write(uint32_t plain_value) {
	uint32_t oldword = ptm_requester_control_read();
	uint32_t newword = ptm_requester_control_enable_replace(oldword, plain_value);
	ptm_requester_control_write(newword);
}
#define CSR_PTM_REQUESTER_CONTROL_TRIGGER_OFFSET 1
#define CSR_PTM_REQUESTER_CONTROL_TRIGGER_SIZE 1
static inline uint32_t ptm_requester_control_trigger_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ptm_requester_control_trigger_read(void) {
	uint32_t word = ptm_requester_control_read();
	return ptm_requester_control_trigger_extract(word);
}
static inline uint32_t ptm_requester_control_trigger_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ptm_requester_control_trigger_write(uint32_t plain_value) {
	uint32_t oldword = ptm_requester_control_read();
	uint32_t newword = ptm_requester_control_trigger_replace(oldword, plain_value);
	ptm_requester_control_write(newword);
}
#define CSR_PTM_REQUESTER_STATUS_ADDR (CSR_BASE + 0x3004L)
#define CSR_PTM_REQUESTER_STATUS_SIZE 1
static inline uint32_t ptm_requester_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
#define CSR_PTM_REQUESTER_STATUS_VALID_OFFSET 0
#define CSR_PTM_REQUESTER_STATUS_VALID_SIZE 1
static inline uint32_t ptm_requester_status_valid_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ptm_requester_status_valid_read(void) {
	uint32_t word = ptm_requester_status_read();
	return ptm_requester_status_valid_extract(word);
}
#define CSR_PTM_REQUESTER_STATUS_BUSY_OFFSET 1
#define CSR_PTM_REQUESTER_STATUS_BUSY_SIZE 1
static inline uint32_t ptm_requester_status_busy_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ptm_requester_status_busy_read(void) {
	uint32_t word = ptm_requester_status_read();
	return ptm_requester_status_busy_extract(word);
}
#define CSR_PTM_REQUESTER_PHY_TX_DELAY_ADDR (CSR_BASE + 0x3008L)
#define CSR_PTM_REQUESTER_PHY_TX_DELAY_SIZE 1
static inline uint32_t ptm_requester_phy_tx_delay_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
#define CSR_PTM_REQUESTER_PHY_RX_DELAY_ADDR (CSR_BASE + 0x300cL)
#define CSR_PTM_REQUESTER_PHY_RX_DELAY_SIZE 1
static inline uint32_t ptm_requester_phy_rx_delay_read(void) {
	return csr_read_simple((CSR_BASE + 0x300cL));
}
#define CSR_PTM_REQUESTER_MASTER_TIME_ADDR (CSR_BASE + 0x3010L)
#define CSR_PTM_REQUESTER_MASTER_TIME_SIZE 2
static inline uint64_t ptm_requester_master_time_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x3010L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x3014L));
	return r;
}
#define CSR_PTM_REQUESTER_LINK_DELAY_ADDR (CSR_BASE + 0x3018L)
#define CSR_PTM_REQUESTER_LINK_DELAY_SIZE 1
static inline uint32_t ptm_requester_link_delay_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
#define CSR_PTM_REQUESTER_T1_TIME_ADDR (CSR_BASE + 0x301cL)
#define CSR_PTM_REQUESTER_T1_TIME_SIZE 2
static inline uint64_t ptm_requester_t1_time_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x301cL));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x3020L));
	return r;
}
#define CSR_PTM_REQUESTER_T4_TIME_ADDR (CSR_BASE + 0x3024L)
#define CSR_PTM_REQUESTER_T4_TIME_SIZE 2
static inline uint64_t ptm_requester_t4_time_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x3024L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x3028L));
	return r;
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x3800L)

/* pcie_dma0 */
#define CSR_PCIE_DMA0_BASE (CSR_BASE + 0x4000L)
#define CSR_PCIE_DMA0_WRITER_ENABLE_ADDR (CSR_BASE + 0x4000L)
#define CSR_PCIE_DMA0_WRITER_ENABLE_SIZE 1
static inline uint32_t pcie_dma0_writer_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void pcie_dma0_writer_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_ADDR (CSR_BASE + 0x4004L)
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_SIZE 2
static inline uint64_t pcie_dma0_writer_table_value_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x4004L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x4008L));
	return r;
}
static inline void pcie_dma0_writer_table_value_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x4004L));
	csr_write_simple(v, (CSR_BASE + 0x4008L));
}
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_ADDRESS_LSB_OFFSET 0
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_ADDRESS_LSB_SIZE 32
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_LENGTH_OFFSET 32
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_LENGTH_SIZE 24
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_IRQ_DISABLE_OFFSET 56
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_IRQ_DISABLE_SIZE 1
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_LAST_DISABLE_OFFSET 57
#define CSR_PCIE_DMA0_WRITER_TABLE_VALUE_LAST_DISABLE_SIZE 1
#define CSR_PCIE_DMA0_WRITER_TABLE_WE_ADDR (CSR_BASE + 0x400cL)
#define CSR_PCIE_DMA0_WRITER_TABLE_WE_SIZE 1
static inline uint32_t pcie_dma0_writer_table_we_read(void) {
	return csr_read_simple((CSR_BASE + 0x400cL));
}
static inline void pcie_dma0_writer_table_we_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x400cL));
}
#define CSR_PCIE_DMA0_WRITER_TABLE_WE_ADDRESS_MSB_OFFSET 0
#define CSR_PCIE_DMA0_WRITER_TABLE_WE_ADDRESS_MSB_SIZE 32
static inline uint32_t pcie_dma0_writer_table_we_address_msb_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_writer_table_we_address_msb_read(void) {
	uint32_t word = pcie_dma0_writer_table_we_read();
	return pcie_dma0_writer_table_we_address_msb_extract(word);
}
static inline uint32_t pcie_dma0_writer_table_we_address_msb_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pcie_dma0_writer_table_we_address_msb_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_writer_table_we_read();
	uint32_t newword = pcie_dma0_writer_table_we_address_msb_replace(oldword, plain_value);
	pcie_dma0_writer_table_we_write(newword);
}
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_PROG_N_ADDR (CSR_BASE + 0x4010L)
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_PROG_N_SIZE 1
static inline uint32_t pcie_dma0_writer_table_loop_prog_n_read(void) {
	return csr_read_simple((CSR_BASE + 0x4010L));
}
static inline void pcie_dma0_writer_table_loop_prog_n_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4010L));
}
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_STATUS_ADDR (CSR_BASE + 0x4014L)
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_STATUS_SIZE 1
static inline uint32_t pcie_dma0_writer_table_loop_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4014L));
}
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_STATUS_INDEX_OFFSET 0
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_STATUS_INDEX_SIZE 16
static inline uint32_t pcie_dma0_writer_table_loop_status_index_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_writer_table_loop_status_index_read(void) {
	uint32_t word = pcie_dma0_writer_table_loop_status_read();
	return pcie_dma0_writer_table_loop_status_index_extract(word);
}
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_STATUS_COUNT_OFFSET 16
#define CSR_PCIE_DMA0_WRITER_TABLE_LOOP_STATUS_COUNT_SIZE 16
static inline uint32_t pcie_dma0_writer_table_loop_status_count_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t pcie_dma0_writer_table_loop_status_count_read(void) {
	uint32_t word = pcie_dma0_writer_table_loop_status_read();
	return pcie_dma0_writer_table_loop_status_count_extract(word);
}
#define CSR_PCIE_DMA0_WRITER_TABLE_LEVEL_ADDR (CSR_BASE + 0x4018L)
#define CSR_PCIE_DMA0_WRITER_TABLE_LEVEL_SIZE 1
static inline uint32_t pcie_dma0_writer_table_level_read(void) {
	return csr_read_simple((CSR_BASE + 0x4018L));
}
#define CSR_PCIE_DMA0_WRITER_TABLE_RESET_ADDR (CSR_BASE + 0x401cL)
#define CSR_PCIE_DMA0_WRITER_TABLE_RESET_SIZE 1
static inline uint32_t pcie_dma0_writer_table_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x401cL));
}
static inline void pcie_dma0_writer_table_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x401cL));
}
#define CSR_PCIE_DMA0_READER_ENABLE_ADDR (CSR_BASE + 0x4020L)
#define CSR_PCIE_DMA0_READER_ENABLE_SIZE 1
static inline uint32_t pcie_dma0_reader_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4020L));
}
static inline void pcie_dma0_reader_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4020L));
}
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_ADDR (CSR_BASE + 0x4024L)
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_SIZE 2
static inline uint64_t pcie_dma0_reader_table_value_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x4024L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x4028L));
	return r;
}
static inline void pcie_dma0_reader_table_value_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x4024L));
	csr_write_simple(v, (CSR_BASE + 0x4028L));
}
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_ADDRESS_LSB_OFFSET 0
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_ADDRESS_LSB_SIZE 32
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_LENGTH_OFFSET 32
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_LENGTH_SIZE 24
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_IRQ_DISABLE_OFFSET 56
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_IRQ_DISABLE_SIZE 1
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_LAST_DISABLE_OFFSET 57
#define CSR_PCIE_DMA0_READER_TABLE_VALUE_LAST_DISABLE_SIZE 1
#define CSR_PCIE_DMA0_READER_TABLE_WE_ADDR (CSR_BASE + 0x402cL)
#define CSR_PCIE_DMA0_READER_TABLE_WE_SIZE 1
static inline uint32_t pcie_dma0_reader_table_we_read(void) {
	return csr_read_simple((CSR_BASE + 0x402cL));
}
static inline void pcie_dma0_reader_table_we_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x402cL));
}
#define CSR_PCIE_DMA0_READER_TABLE_WE_ADDRESS_MSB_OFFSET 0
#define CSR_PCIE_DMA0_READER_TABLE_WE_ADDRESS_MSB_SIZE 32
static inline uint32_t pcie_dma0_reader_table_we_address_msb_extract(uint32_t oldword) {
	uint32_t mask = 0xffffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_reader_table_we_address_msb_read(void) {
	uint32_t word = pcie_dma0_reader_table_we_read();
	return pcie_dma0_reader_table_we_address_msb_extract(word);
}
static inline uint32_t pcie_dma0_reader_table_we_address_msb_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pcie_dma0_reader_table_we_address_msb_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_reader_table_we_read();
	uint32_t newword = pcie_dma0_reader_table_we_address_msb_replace(oldword, plain_value);
	pcie_dma0_reader_table_we_write(newword);
}
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_PROG_N_ADDR (CSR_BASE + 0x4030L)
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_PROG_N_SIZE 1
static inline uint32_t pcie_dma0_reader_table_loop_prog_n_read(void) {
	return csr_read_simple((CSR_BASE + 0x4030L));
}
static inline void pcie_dma0_reader_table_loop_prog_n_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4030L));
}
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_STATUS_ADDR (CSR_BASE + 0x4034L)
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_STATUS_SIZE 1
static inline uint32_t pcie_dma0_reader_table_loop_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4034L));
}
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_STATUS_INDEX_OFFSET 0
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_STATUS_INDEX_SIZE 16
static inline uint32_t pcie_dma0_reader_table_loop_status_index_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_reader_table_loop_status_index_read(void) {
	uint32_t word = pcie_dma0_reader_table_loop_status_read();
	return pcie_dma0_reader_table_loop_status_index_extract(word);
}
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_STATUS_COUNT_OFFSET 16
#define CSR_PCIE_DMA0_READER_TABLE_LOOP_STATUS_COUNT_SIZE 16
static inline uint32_t pcie_dma0_reader_table_loop_status_count_extract(uint32_t oldword) {
	uint32_t mask = 0xffff;
	return ( (oldword >> 16) & mask );
}
static inline uint32_t pcie_dma0_reader_table_loop_status_count_read(void) {
	uint32_t word = pcie_dma0_reader_table_loop_status_read();
	return pcie_dma0_reader_table_loop_status_count_extract(word);
}
#define CSR_PCIE_DMA0_READER_TABLE_LEVEL_ADDR (CSR_BASE + 0x4038L)
#define CSR_PCIE_DMA0_READER_TABLE_LEVEL_SIZE 1
static inline uint32_t pcie_dma0_reader_table_level_read(void) {
	return csr_read_simple((CSR_BASE + 0x4038L));
}
#define CSR_PCIE_DMA0_READER_TABLE_RESET_ADDR (CSR_BASE + 0x403cL)
#define CSR_PCIE_DMA0_READER_TABLE_RESET_SIZE 1
static inline uint32_t pcie_dma0_reader_table_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x403cL));
}
static inline void pcie_dma0_reader_table_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x403cL));
}
#define CSR_PCIE_DMA0_LOOPBACK_ENABLE_ADDR (CSR_BASE + 0x4040L)
#define CSR_PCIE_DMA0_LOOPBACK_ENABLE_SIZE 1
static inline uint32_t pcie_dma0_loopback_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4040L));
}
static inline void pcie_dma0_loopback_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4040L));
}
#define CSR_PCIE_DMA0_SYNCHRONIZER_BYPASS_ADDR (CSR_BASE + 0x4044L)
#define CSR_PCIE_DMA0_SYNCHRONIZER_BYPASS_SIZE 1
static inline uint32_t pcie_dma0_synchronizer_bypass_read(void) {
	return csr_read_simple((CSR_BASE + 0x4044L));
}
static inline void pcie_dma0_synchronizer_bypass_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4044L));
}
#define CSR_PCIE_DMA0_SYNCHRONIZER_ENABLE_ADDR (CSR_BASE + 0x4048L)
#define CSR_PCIE_DMA0_SYNCHRONIZER_ENABLE_SIZE 1
static inline uint32_t pcie_dma0_synchronizer_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4048L));
}
static inline void pcie_dma0_synchronizer_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4048L));
}
#define CSR_PCIE_DMA0_SYNCHRONIZER_ENABLE_MODE_OFFSET 0
#define CSR_PCIE_DMA0_SYNCHRONIZER_ENABLE_MODE_SIZE 2
static inline uint32_t pcie_dma0_synchronizer_enable_mode_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_synchronizer_enable_mode_read(void) {
	uint32_t word = pcie_dma0_synchronizer_enable_read();
	return pcie_dma0_synchronizer_enable_mode_extract(word);
}
static inline uint32_t pcie_dma0_synchronizer_enable_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pcie_dma0_synchronizer_enable_mode_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_synchronizer_enable_read();
	uint32_t newword = pcie_dma0_synchronizer_enable_mode_replace(oldword, plain_value);
	pcie_dma0_synchronizer_enable_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_ADDR (CSR_BASE + 0x404cL)
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_SIZE 1
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x404cL));
}
static inline void pcie_dma0_buffering_reader_fifo_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x404cL));
}
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_DEPTH_OFFSET 0
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_DEPTH_SIZE 24
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_depth_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_depth_read(void) {
	uint32_t word = pcie_dma0_buffering_reader_fifo_control_read();
	return pcie_dma0_buffering_reader_fifo_control_depth_extract(word);
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_depth_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pcie_dma0_buffering_reader_fifo_control_depth_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_buffering_reader_fifo_control_read();
	uint32_t newword = pcie_dma0_buffering_reader_fifo_control_depth_replace(oldword, plain_value);
	pcie_dma0_buffering_reader_fifo_control_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_SCRATCH_OFFSET 24
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_SCRATCH_SIZE 4
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_scratch_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_scratch_read(void) {
	uint32_t word = pcie_dma0_buffering_reader_fifo_control_read();
	return pcie_dma0_buffering_reader_fifo_control_scratch_extract(word);
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_scratch_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void pcie_dma0_buffering_reader_fifo_control_scratch_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_buffering_reader_fifo_control_read();
	uint32_t newword = pcie_dma0_buffering_reader_fifo_control_scratch_replace(oldword, plain_value);
	pcie_dma0_buffering_reader_fifo_control_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_LEVEL_MODE_OFFSET 31
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_CONTROL_LEVEL_MODE_SIZE 1
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_level_mode_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_level_mode_read(void) {
	uint32_t word = pcie_dma0_buffering_reader_fifo_control_read();
	return pcie_dma0_buffering_reader_fifo_control_level_mode_extract(word);
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_control_level_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void pcie_dma0_buffering_reader_fifo_control_level_mode_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_buffering_reader_fifo_control_read();
	uint32_t newword = pcie_dma0_buffering_reader_fifo_control_level_mode_replace(oldword, plain_value);
	pcie_dma0_buffering_reader_fifo_control_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_STATUS_ADDR (CSR_BASE + 0x4050L)
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_STATUS_SIZE 1
static inline uint32_t pcie_dma0_buffering_reader_fifo_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4050L));
}
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_STATUS_LEVEL_OFFSET 0
#define CSR_PCIE_DMA0_BUFFERING_READER_FIFO_STATUS_LEVEL_SIZE 24
static inline uint32_t pcie_dma0_buffering_reader_fifo_status_level_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_buffering_reader_fifo_status_level_read(void) {
	uint32_t word = pcie_dma0_buffering_reader_fifo_status_read();
	return pcie_dma0_buffering_reader_fifo_status_level_extract(word);
}
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_ADDR (CSR_BASE + 0x4054L)
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_SIZE 1
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x4054L));
}
static inline void pcie_dma0_buffering_writer_fifo_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4054L));
}
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_DEPTH_OFFSET 0
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_DEPTH_SIZE 24
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_depth_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_depth_read(void) {
	uint32_t word = pcie_dma0_buffering_writer_fifo_control_read();
	return pcie_dma0_buffering_writer_fifo_control_depth_extract(word);
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_depth_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xffffff;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void pcie_dma0_buffering_writer_fifo_control_depth_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_buffering_writer_fifo_control_read();
	uint32_t newword = pcie_dma0_buffering_writer_fifo_control_depth_replace(oldword, plain_value);
	pcie_dma0_buffering_writer_fifo_control_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_SCRATCH_OFFSET 24
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_SCRATCH_SIZE 4
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_scratch_extract(uint32_t oldword) {
	uint32_t mask = 0xf;
	return ( (oldword >> 24) & mask );
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_scratch_read(void) {
	uint32_t word = pcie_dma0_buffering_writer_fifo_control_read();
	return pcie_dma0_buffering_writer_fifo_control_scratch_extract(word);
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_scratch_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0xf;
	return (oldword & (~(mask << 24))) | (mask & plain_value)<< 24 ;
}
static inline void pcie_dma0_buffering_writer_fifo_control_scratch_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_buffering_writer_fifo_control_read();
	uint32_t newword = pcie_dma0_buffering_writer_fifo_control_scratch_replace(oldword, plain_value);
	pcie_dma0_buffering_writer_fifo_control_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_LEVEL_MODE_OFFSET 31
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_CONTROL_LEVEL_MODE_SIZE 1
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_level_mode_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 31) & mask );
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_level_mode_read(void) {
	uint32_t word = pcie_dma0_buffering_writer_fifo_control_read();
	return pcie_dma0_buffering_writer_fifo_control_level_mode_extract(word);
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_control_level_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 31))) | (mask & plain_value)<< 31 ;
}
static inline void pcie_dma0_buffering_writer_fifo_control_level_mode_write(uint32_t plain_value) {
	uint32_t oldword = pcie_dma0_buffering_writer_fifo_control_read();
	uint32_t newword = pcie_dma0_buffering_writer_fifo_control_level_mode_replace(oldword, plain_value);
	pcie_dma0_buffering_writer_fifo_control_write(newword);
}
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_STATUS_ADDR (CSR_BASE + 0x4058L)
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_STATUS_SIZE 1
static inline uint32_t pcie_dma0_buffering_writer_fifo_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4058L));
}
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_STATUS_LEVEL_OFFSET 0
#define CSR_PCIE_DMA0_BUFFERING_WRITER_FIFO_STATUS_LEVEL_SIZE 24
static inline uint32_t pcie_dma0_buffering_writer_fifo_status_level_extract(uint32_t oldword) {
	uint32_t mask = 0xffffff;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_dma0_buffering_writer_fifo_status_level_read(void) {
	uint32_t word = pcie_dma0_buffering_writer_fifo_status_read();
	return pcie_dma0_buffering_writer_fifo_status_level_extract(word);
}
#define CSR_PCIE_DMA0_WRITER_MONITOR_RESET_ADDR (CSR_BASE + 0x405cL)
#define CSR_PCIE_DMA0_WRITER_MONITOR_RESET_SIZE 1
static inline uint32_t pcie_dma0_writer_monitor_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x405cL));
}
static inline void pcie_dma0_writer_monitor_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x405cL));
}
#define CSR_PCIE_DMA0_WRITER_MONITOR_LATCH_ADDR (CSR_BASE + 0x4060L)
#define CSR_PCIE_DMA0_WRITER_MONITOR_LATCH_SIZE 1
static inline uint32_t pcie_dma0_writer_monitor_latch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4060L));
}
static inline void pcie_dma0_writer_monitor_latch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4060L));
}
#define CSR_PCIE_DMA0_WRITER_MONITOR_OVERFLOWS_ADDR (CSR_BASE + 0x4064L)
#define CSR_PCIE_DMA0_WRITER_MONITOR_OVERFLOWS_SIZE 1
static inline uint32_t pcie_dma0_writer_monitor_overflows_read(void) {
	return csr_read_simple((CSR_BASE + 0x4064L));
}
#define CSR_PCIE_DMA0_READER_MONITOR_RESET_ADDR (CSR_BASE + 0x4068L)
#define CSR_PCIE_DMA0_READER_MONITOR_RESET_SIZE 1
static inline uint32_t pcie_dma0_reader_monitor_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x4068L));
}
static inline void pcie_dma0_reader_monitor_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4068L));
}
#define CSR_PCIE_DMA0_READER_MONITOR_LATCH_ADDR (CSR_BASE + 0x406cL)
#define CSR_PCIE_DMA0_READER_MONITOR_LATCH_SIZE 1
static inline uint32_t pcie_dma0_reader_monitor_latch_read(void) {
	return csr_read_simple((CSR_BASE + 0x406cL));
}
static inline void pcie_dma0_reader_monitor_latch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x406cL));
}
#define CSR_PCIE_DMA0_READER_MONITOR_UNDERFLOWS_ADDR (CSR_BASE + 0x4070L)
#define CSR_PCIE_DMA0_READER_MONITOR_UNDERFLOWS_SIZE 1
static inline uint32_t pcie_dma0_reader_monitor_underflows_read(void) {
	return csr_read_simple((CSR_BASE + 0x4070L));
}

/* pcie_endpoint */
#define CSR_PCIE_ENDPOINT_BASE (CSR_BASE + 0x4800L)
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_ADDR (CSR_BASE + 0x4800L)
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_SIZE 1
static inline uint32_t pcie_endpoint_phy_link_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_STATUS_OFFSET 0
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_STATUS_SIZE 1
static inline uint32_t pcie_endpoint_phy_link_status_status_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t pcie_endpoint_phy_link_status_status_read(void) {
	uint32_t word = pcie_endpoint_phy_link_status_read();
	return pcie_endpoint_phy_link_status_status_extract(word);
}
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_RATE_OFFSET 1
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_RATE_SIZE 1
static inline uint32_t pcie_endpoint_phy_link_status_rate_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t pcie_endpoint_phy_link_status_rate_read(void) {
	uint32_t word = pcie_endpoint_phy_link_status_read();
	return pcie_endpoint_phy_link_status_rate_extract(word);
}
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_WIDTH_OFFSET 2
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_WIDTH_SIZE 2
static inline uint32_t pcie_endpoint_phy_link_status_width_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t pcie_endpoint_phy_link_status_width_read(void) {
	uint32_t word = pcie_endpoint_phy_link_status_read();
	return pcie_endpoint_phy_link_status_width_extract(word);
}
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_LTSSM_OFFSET 4
#define CSR_PCIE_ENDPOINT_PHY_LINK_STATUS_LTSSM_SIZE 6
static inline uint32_t pcie_endpoint_phy_link_status_ltssm_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t pcie_endpoint_phy_link_status_ltssm_read(void) {
	uint32_t word = pcie_endpoint_phy_link_status_read();
	return pcie_endpoint_phy_link_status_ltssm_extract(word);
}
#define CSR_PCIE_ENDPOINT_PHY_MSI_ENABLE_ADDR (CSR_BASE + 0x4804L)
#define CSR_PCIE_ENDPOINT_PHY_MSI_ENABLE_SIZE 1
static inline uint32_t pcie_endpoint_phy_msi_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4804L));
}
#define CSR_PCIE_ENDPOINT_PHY_MSIX_ENABLE_ADDR (CSR_BASE + 0x4808L)
#define CSR_PCIE_ENDPOINT_PHY_MSIX_ENABLE_SIZE 1
static inline uint32_t pcie_endpoint_phy_msix_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4808L));
}
#define CSR_PCIE_ENDPOINT_PHY_BUS_MASTER_ENABLE_ADDR (CSR_BASE + 0x480cL)
#define CSR_PCIE_ENDPOINT_PHY_BUS_MASTER_ENABLE_SIZE 1
static inline uint32_t pcie_endpoint_phy_bus_master_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x480cL));
}
#define CSR_PCIE_ENDPOINT_PHY_MAX_REQUEST_SIZE_ADDR (CSR_BASE + 0x4810L)
#define CSR_PCIE_ENDPOINT_PHY_MAX_REQUEST_SIZE_SIZE 1
static inline uint32_t pcie_endpoint_phy_max_request_size_read(void) {
	return csr_read_simple((CSR_BASE + 0x4810L));
}
#define CSR_PCIE_ENDPOINT_PHY_MAX_PAYLOAD_SIZE_ADDR (CSR_BASE + 0x4814L)
#define CSR_PCIE_ENDPOINT_PHY_MAX_PAYLOAD_SIZE_SIZE 1
static inline uint32_t pcie_endpoint_phy_max_payload_size_read(void) {
	return csr_read_simple((CSR_BASE + 0x4814L));
}

#endif
